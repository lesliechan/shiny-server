{
    "contents" : "\n# This is the server logic for a Shiny web application.\n\nlibrary(shiny)\nlibrary(grid)\nlibrary(ggplot2)\n\n\nshinyServer(function(input, output) {\n\n        # Default Parameters\n        # ==========\n        n <- 100                        ## resolution of ECG\n        x <- seq(0, 6, by=0.01)         ## ECG strip size (standard)\n        x2 <- seq(0, 24, by=0.01)       ## ECG strip size (long lead)\n        leadnames <- c(\"I\", \"II\", \"III\", \"aVR\", \"aVL\", \"aVF\", \"V1\", \"V2\", \"V3\", \"V4\", \"V5\", \"V6\")\n        \n        small_h <- 0.2                 ## small square height\n        small_w <- 0.2                 ## small square width\n        big_h <- 5\n        big_w <- 5\n        \n        strip_x <- 6                    ## individual strip length\n        strip_y <- 4                    ## individual strip height\n\n        ## set/ change default numbers here (here is taken to be lead II)\n        ecgp <- c(0.25,0.09,0.16)\n        ecgq <- c(0.025,0.066,0.166)\n        ecgqrs <- c(1.6,0.11,0)\n        ecgs <- c(0.025,0.66,0.09)\n        ecgt <- c(0.35,0.144,0.2)\n        ecgu <- c(0.015,0.0476,0.433)\n\n        ## correct the time (t)\n        ## ==========\n        ##\n        ## leadII is the variable that contains the default values of the ECG that all\n        ## the other ECG leads are based upon with the time t corrected\n        ## it has a total of 18 variables: 6 waves (p, q, qrs, s, t, u) \n        ## their 3 individual wave characteristics (a, d, t)\n        ##\n        leadII <- c(ecgp, ecgq, ecgqrs, ecgs, ecgt, ecgu)\n        leadII[c(12,15,18)] <- -1*(leadII[c(12,15,18)])\n        leadII[15] <- leadII[15] - 0.045\n\n        ## corrected_axis is the default for a,d,t of all the waves of all 12 leads\n        default_axis <- cbind(leadII, leadII, leadII, leadII, leadII, leadII, leadII, leadII, leadII, leadII, leadII, leadII)\n        colnames(default_axis) <- leadnames\n        rownames(default_axis) <- c(\"a_p\",\"d_p\",\"t_p\",\"a_q\",\"d_q\",\"t_q\",\"a_qrs\",\"d_qrs\",\"t_qrs\",\n                                      \"a_s\",\"d_s\",\"t_s\",\"a_t\",\"d_t\",\"t_t\",\"a_u\",\"d_u\",\"t_u\")\n\n\n        ## Default ECG Themes\n        ecgtheme <- theme(axis.text.y=element_blank(),\n                          axis.text.x=element_blank(),\n                          axis.title.y=element_blank(),\n                          axis.title.x=element_blank(),\n                          plot.margin = unit(c(0,-0.6,-0.6,-0.6),\"cm\"),\n                          panel.background=element_rect(fill=\"white\"), \n                          panel.grid.major=element_line(colour=\"red\"),\n                          panel.grid.minor=element_line(colour=\"pink\"))      \n        \n        \n        # The Functions used to Draw the ECG\n        # =========\n        \n        \n        # FUNCTION: theaxisfactor(front_axis, coronal_axis)\n        # =======\n        # function returns the axis factors for 12 leads given the,\n        # front_axis (qrs_axis) AND the coronal_axis (uni_axis)\n        #\n        # I, II, III, aVR, aVL, aVF, V1, V2, V3, V4, V5, V6\n        # 0, 60, 120, -150, -30, 90, \n        \n        theaxisfactor <- function(front_axis, coronal_axis) {\n                return( c(cos(pi*(front_axis-0)/180),cos(pi*(front_axis-60)/180),cos(pi*(front_axis-120)/180),\n                          cos(pi*(front_axis+150)/180),cos(pi*(front_axis+30)/180),cos(pi*(front_axis-90)/180),\n                          sin(pi*(coronal_axis-90)/180),sin(pi*(coronal_axis-80)/180),sin(pi*(coronal_axis-70)/180),\n                          sin(pi*(coronal_axis-60)/180),sin(pi*(coronal_axis-30)/180),sin(pi*(coronal_axis-0)/180)))                \n        }\n\n        \n        ## Function: Generic WAVE1 (p, t, u) function\n        ## -----------\n        ## draws the generic wave1 in the ECG\n        ## \n        type1wav <- function(x,a,d,t,l) {\n                x=x+t\n                b=(2*l)/d\n                w1=1/l\n                w2=0\n                \n                for(i in 1:n) {\n                        harm1=(((sin((pi/(2*b))*(b-(2*i))))/(b-(2*i))+(sin((pi/(2*b))*(b+(2*i))))/(b+(2*i)))*(2/pi))*cos((i*pi*x)/l)             \n                        w2=w2+harm1\n                }\n                \n                wav1 <- w1+w2\n                return(a*wav1)\n        }\n        \n        ## Function: Generic WAVE2 (q, qrs, s) function\n        ## -----------\n        ## draws the generic wave2 in the ECG\n        ##\n        type2wav <- function(x,a,d,t,l) {\n                b=(2*l)/d\n                w1=(a/(2*b))*(2-b)\n                w2=0\n                for(i in 1:n) {\n                        harm2=(((2*b*a)/(i*i*pi*pi))*(1-cos((i*pi)/b)))*cos((i*pi*x)/l)\n                        w2=w2+harm2\n                }\n                return(w1+w2)\n        }\n\n        \n        ##\n        ## ecgpoints function\n        ## ==========\n        ecgpoints <- function(x, li,\n                              a_p, d_p, t_p,\n                              a_q, d_q, t_q,\n                              a_qrs, d_qrs, t_qrs,\n                              a_s, d_s, t_s,\n                              a_t, d_t,t_t,\n                              a_u, d_u, t_u) {\n                \n                if (input$show_p) {pwav=type1wav(x,a_p,d_p,t_p,li)}\n                else {pwav=type1wav(x,0,d_p,t_p,li)}\n                \n                if (input$show_q) {qwav=type2wav(x,a_q,d_q,t_q,li)\n                qrswav=type2wav(x,a_qrs,d_qrs,t_q, li)\n                swav=type2wav(x,a_s,d_s,t_s,li)}\n                else {qwav=type2wav(x,0,d_q,t_q,li)\n                qrswav=type2wav(x,0,d_qrs,t_qrs, li)\n                swav=type2wav(x,0,d_s,t_s,li)}\n                \n                if (input$show_t) {twav=type1wav(x,a_t,d_t,t_t,li)}\n                else {twav=type1wav(x,0,d_t,t_t,li)}\n                \n                if (input$show_u) {uwav=type1wav(x,a_u,d_u,t_u,li)}\n                else {uwav=type1wav(x,0,d_u,t_u,li)}\n                \n                ecg=pwav+qrswav+twav+swav+qwav+uwav\n                return(ecg)\n                \n        }\n        \n        # multiplot function (used to combine (twelve) plots to create\n        # a 12-lead ECG)\n        # ==========\n        \n        multiplot <- function(..., plotlist = NULL, file, cols = 4, layout = NULL) {\n                require(grid)\n                plots <- c(list(...), plotlist)\n                numPlots = length(plots)\n                if (is.null(layout)) {\n                        layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                                         ncol = cols, nrow = ceiling(numPlots/cols))\n                }\n                if (numPlots == 1) {\n                        print(plots[[1]])\n                } else {\n                        grid.newpage()\n                        pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n                        for (i in 1:numPlots) {\n                                matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n                                print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                                                layout.pos.col = matchidx$col))\n                }}}\n\n        \n        \n        \n        ## generate the data when inputs change\n        ## (reactive process)\n        \n        ## =======================\n        ## REACTIVE FUNCTION: data_shortlead\n        ## =======================\n        \n        axis <- reactive({\n\n                # calculate the ECG plots with initial values\n                #\n                # this for loop corrects the waves based on the axis values,\n                # and feeds it back to the corrected_axis\n                #\n                # FUTURE USE: change the axis inputs for theaxisfactor\n                temp_axis <- default_axis\n                temp_axis[\"a_qrs\",] <- temp_axis[\"a_qrs\",]*theaxisfactor(input$qaxis, input$qaxis)\n                temp_axis[\"a_p\",] <- temp_axis[\"a_p\",]*theaxisfactor(input$paxis, input$paxis)\n                temp_axis[\"a_t\",] <- temp_axis[\"a_t\",]*theaxisfactor(input$taxis, input$taxis)\n                temp_axis\n        })\n        \n        temp_min_y <- function(lead) {\n                floor(mean(ecg_data()[,lead])) - strip_y/2\n        }\n        \n        temp_max_y <- function(lead) {\n                temp_min_y(lead) + strip_y\n        }\n        \n        zl1 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=I)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"I\", x=0.5, y=temp_max_y(2), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(2)-0.5,temp_max_y(2)+2.5,small_h),\n                                           breaks=seq(temp_min_y(2)-0.5,temp_max_y(2)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(2),temp_max_y(2)))\n        }\n        \n        zl2 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=II)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"II\", x=0.5, y=temp_max_y(3), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(3)-0.5,temp_max_y(3)+2.5,small_h),\n                                           breaks=seq(temp_min_y(3)-0.5,temp_max_y(3)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(3),temp_max_y(3)))\n        }\n        \n        zll2 <- function() {\n                ggplot(ecg_data_long(), aes(x=x2,y=II)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"II\", x=0.5, y=temp_max_y(3), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x*4,small_w),\n                                           breaks=seq(0,strip_x*4, small_w*big_w),\n                                           limits=c(0,strip_x*4)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(3)-0.5,temp_max_y(3)+2.5,small_h),\n                                           breaks=seq(temp_min_y(3)-0.5,temp_max_y(3)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(3),temp_max_y(3)))\n        }\n        \n        \n        zl3 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=III)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"III\", x=0.5, y=temp_max_y(4), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(4)-0.5,temp_max_y(4)+2.5,small_h),\n                                           breaks=seq(temp_min_y(4)-0.5,temp_max_y(4)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(4),temp_max_y(4)))\n        }\n        \n        zvr <- function() {\n                ggplot(ecg_data(), aes(x=x,y=aVR)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"aVR\", x=0.5, y=temp_max_y(5), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(5)-0.5,temp_max_y(5)+2.5,small_h),\n                                           breaks=seq(temp_min_y(5)-0.5,temp_max_y(5)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(5),temp_max_y(5)))\n        }\n        \n        zvl <- function() {\n                ggplot(ecg_data(), aes(x=x,y=aVL)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"aVL\", x=0.5, y=temp_max_y(6), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(6)-0.5,temp_max_y(6)+2.5,small_h),\n                                           breaks=seq(temp_min_y(6)-0.5,temp_max_y(6)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(6),temp_max_y(6)))\n        }\n        \n        zvf <- function() {\n                ggplot(ecg_data(), aes(x=x,y=aVF)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"aVF\", x=0.5, y=temp_max_y(7), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(7)-0.5,temp_max_y(7)+2.5,small_h),\n                                           breaks=seq(temp_min_y(7)-0.5,temp_max_y(7)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(7),temp_max_y(7)))\n        }\n\n        \n        zv1 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=V1)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"V1\", x=0.5, y=temp_max_y(8), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(8)-0.5,temp_max_y(8)+2.5,small_h),\n                                           breaks=seq(temp_min_y(8)-0.5,temp_max_y(8)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(8),temp_max_y(8)))\n        } \n        \n        zv2 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=V2)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"V2\", x=0.5, y=temp_max_y(9), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(9)-0.5,temp_max_y(9)+2.5,small_h),\n                                           breaks=seq(temp_min_y(9)-0.5,temp_max_y(9)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(9),temp_max_y(9)))\n        }\n        \n        zv3 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=V3)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"V3\", x=0.5, y=temp_max_y(10), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(10)-0.5,temp_max_y(10)+2.5,small_h),\n                                           breaks=seq(temp_min_y(10)-0.5,temp_max_y(10)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(10),temp_max_y(10)))\n        }\n        \n        zv4 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=V4)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"V4\", x=0.5, y=temp_max_y(11), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(11)-0.5,temp_max_y(11)+2.5,small_h),\n                                           breaks=seq(temp_min_y(11)-0.5,temp_max_y(11)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(11),temp_max_y(11)))\n        }\n        \n        zv5 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=V5)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"V5\", x=0.5, y=temp_max_y(12), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(12)-0.5,temp_max_y(12)+2.5,small_h),\n                                           breaks=seq(temp_min_y(12)-0.5,temp_max_y(12)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(12),temp_max_y(12)))\n        }\n        \n        \n        zv6 <- function() {\n                ggplot(ecg_data(), aes(x=x,y=V6)) + geom_line() + ecgtheme +\n                        annotate(\"text\", label=\"V6\", x=0.5, y=temp_max_y(13), size = 8, colour=\"black\") +\n                        scale_x_continuous(minor_breaks=seq(0,strip_x,small_w),\n                                           breaks=seq(0,strip_x, small_w*big_w),\n                                           limits=c(0,strip_x)) + \n                        scale_y_continuous(minor_breaks=seq(temp_min_y(13)-0.5,temp_max_y(13)+2.5,small_h),\n                                           breaks=seq(temp_min_y(13)-0.5,temp_max_y(13)+2.5,small_h*big_h),\n                                           limits=c(temp_min_y(13),temp_max_y(13)))\n        }\n        \n        ecg_data_long <- reactive({\n                li <- 30/input$rate\n                temp_ecg_data <- data.frame(x2)\n                temp_ecg_data <- cbind(temp_ecg_data, ecgpoints(x2, li, \n                          axis()[\"a_p\",2],axis()[\"d_p\",2],axis()[\"t_p\",2],\n                          axis()[\"a_q\",2],axis()[\"d_q\",2],axis()[\"t_q\",2],\n                          axis()[\"a_qrs\",2],axis()[\"d_qrs\",2],axis()[\"t_qrs\",2],\n                          axis()[\"a_s\",2],axis()[\"d_s\",2],axis()[\"t_s\",2],\n                          axis()[\"a_t\",2],axis()[\"d_t\",2],axis()[\"t_t\",2],\n                          axis()[\"a_u\",2],axis()[\"d_u\",2],axis()[\"t_u\",2]\n                ))\n                names(temp_ecg_data) <- c(\"x2\",\"II\")\n                temp_ecg_data\n        }) \n                \n        ecg_data <- reactive({\n                li <- 30/input$rate             ## parameters correct for HR\n                temp_ecg_data <- data.frame(x)\n                for (elead in 1:12) {\n                        temp_ecg_data <- cbind(temp_ecg_data,\n                        ecgpoints(x, li, \n                                axis()[\"a_p\",elead],axis()[\"d_p\",elead],axis()[\"t_p\",elead],\n                                axis()[\"a_q\",elead],axis()[\"d_q\",elead],axis()[\"t_q\",elead],\n                                axis()[\"a_qrs\",elead],axis()[\"d_qrs\",elead],axis()[\"t_qrs\",elead],\n                                axis()[\"a_s\",elead],axis()[\"d_s\",elead],axis()[\"t_s\",elead],\n                                axis()[\"a_t\",elead],axis()[\"d_t\",elead],axis()[\"t_t\",elead],\n                                axis()[\"a_u\",elead],axis()[\"d_u\",elead],axis()[\"t_u\",elead]\n                        ))}\n                names(temp_ecg_data) <- c(\"x\", \"I\",\"II\",\"III\",\"aVR\",\"aVL\",\"aVF\",\n                                          \"V1\",\"V2\",\"V3\",\"V4\",\"V5\",\"V6\")\n                temp_ecg_data\n        })\n        \n        \n        output$display12leads <- renderPlot({\n             \n        # draw the 12-lead ECG with the specified variables\n        multiplot(zl1(), zvr(), zv1(), zv4(), zl2(), zvl(), zv2(), zv5(), zl3(), zvf(), zv3(), zv6(), zll2(), \n                  layout=matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,13,13,13),\n                                ncol=4,byrow=TRUE))\n        })\n        \n        output$display_lead_I <- renderPlot({ zl1() })\n        output$display_lead_II <- renderPlot({ zl2() })\n        output$display_lead_III <- renderPlot({ zl3() })\n        output$display_lead_aVR <- renderPlot({ zvr() })\n        output$display_lead_aVL <- renderPlot({ zvl() })\n        output$display_lead_aVF <- renderPlot({ zvf() })\n        output$display_lead_V1 <- renderPlot({ zv1() })\n        output$display_lead_V2 <- renderPlot({ zv2() })\n        output$display_lead_V3 <- renderPlot({ zv3() })\n        output$display_lead_V4 <- renderPlot({ zv4() })\n        output$display_lead_V5 <- renderPlot({ zv5() })\n        output$display_lead_V6 <- renderPlot({ zv6() })\n##        output$display_debug <- renderText({ paste() })\n\n})\n",
    "created" : 1455163336753.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1635477569",
    "id" : "2C7ED160",
    "lastKnownWriteTime" : 1455361958,
    "path" : "~/Documents/Rsandbox/ECGMTE2016/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}